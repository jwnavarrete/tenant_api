generator client {
  provider      = "prisma-client-js"
  output        = "./generated"
  binaryTargets = ["native", "debian-openssl-3.0.x"] //  "debian-openssl-3.0.x" for google functions
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(uuid()) // Identificador único del tenant
  subdomain String   @unique // Subdominio único para el tenant
  clientId  String   @unique // Clave foránea que referencia a la tabla Client
  client    Client   @relation(fields: [clientId], references: [id]) // Relación con Client
  users     User[] // Relación uno a muchos con User
  createdAt DateTime @default(now()) // Fecha de creación
  updatedAt DateTime @updatedAt // Fecha de última actualización

  @@map("tenant")
}

model Client {
  id                String   @id @default(uuid()) // Identificador único del cliente (empresa)
  type              String // Teléfono de la empresa
  name              String // Nombre de la empresa
  kvk               String // Teléfono de la empresa
  contactEmail      String // Email de contacto de la empresa
  numberOfEmployees String // Teléfono de la empresa
  country           String // Teléfono de la empresa
  address           String // Dirección de la empresa
  tenant            Tenant? // Relación uno a uno con Tenant
  termsAccepted     Boolean // Indica si el cliente ha aceptado los términos y condiciones
  createdAt         DateTime @default(now()) // Fecha de creación
  updatedAt         DateTime @updatedAt // Fecha de última actualización

  @@map("client")
}

model Role {
  id          String   @id @default(uuid()) // Identificador único del rol
  name        String   @unique // Nombre del rol (por ejemplo, "Administrador", "Ejecutivo")
  description String // Descripción del rol
  users       User[] // Relación uno a muchos con User
  createdAt   DateTime @default(now()) // Fecha de creación
  updatedAt   DateTime @updatedAt // Fecha de última actualización

  @@map("role")
}

model User {
  id                 String    @id @default(uuid()) // Identificador único de la relación
  tenantId           String // Clave foránea que referencia a la tabla Tenant
  tenant             Tenant    @relation(fields: [tenantId], references: [id]) // Relación con Tenant
  email              String    @db.VarChar(80)
  fullname           String?   @db.VarChar(80)
  password           String?   @db.VarChar(120)
  country            String?   @db.VarChar(80)
  phone              String?   @db.VarChar(25)
  typeIdentification String?   @db.VarChar(25)
  identification     String?   @db.VarChar(25)
  emailVerified      Boolean   @default(false) // Indica si el correo ha sido verificado
  verificationToken  String? // Token para la verificación del correo  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  resetPasswordToken String? // Token para el restablecimiento de contraseña
  joined             DateTime? // Fecha en la que se unió al tenant
  invitedById        String? // Clave foránea que referencia al usuario que lo invitó
  invitedBy          User?     @relation("UserInvitations", fields: [invitedById], references: [id])
  invitations        User[]    @relation("UserInvitations")
  lastActive         DateTime? // Fecha de último login
  status             String    @default("pending") // Estado del usuario (pending, active, inactive)
  invitationToken    String? // Token para gestionar la invitación
  roleId             String // Clave foránea que referencia a la tabla Role
  role               Role      @relation(fields: [roleId], references: [id]) // Relación uno a muchos con Role

  @@unique([tenantId, email]) // Asegura que el email sea único solo para el mismo tenant
  @@map("users")
}
